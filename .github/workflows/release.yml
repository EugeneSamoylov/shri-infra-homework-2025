name: Release

on:
  workflow_dispatch: 

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Get release version
        id: version
        run: echo "version=${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git checkout -b releases/${{ steps.version.outputs.version }}
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git releases/${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Yandex Container Registry
        run: |
          echo ${{ secrets.YC_OAUTH_TOKEN }} | docker login \
            --username oauth \
            --password-stdin \
            cr.yandex

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ steps.version.outputs.version }}
            cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:latest

      - name: Get changelog
        id: changelog
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s")
          else
            CHANGES=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s")
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          VERSION=${{ steps.version.outputs.version }}
          DATE=$(date +%Y-%m-%d)
          HEADER="## Release $VERSION ($DATE)"
          echo -e "$HEADER\n\n${{ steps.changelog.outputs.changelog }}\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for release $VERSION"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git releases/$VERSION

      - name: Create tag
        run: |
          VERSION=${{ steps.version.outputs.version }}
          git tag v$VERSION
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git v$VERSION

      - name: Create release issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          DATE=$(date +%Y-%m-%d)
          AUTHOR=${{ github.actor }}
          IMAGE="cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:$VERSION"
          CHANGES=${{ steps.changelog.outputs.changelog }}
          BODY=$(cat <<EOF
          **Release Information**
          - Version: $VERSION
          - Date: $DATE
          - Author: $AUTHOR
          - Docker Image: $IMAGE
          
          **Changes:**
          $CHANGES
          EOF
          )
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues \
            -d "{\"title\":\"Release $VERSION\", \"body\":\"$BODY\"}"